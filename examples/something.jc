type Result a b :: (Ok a) | (Err b)
type Bool :: True | False

type Option a :: (Some a) | None

type ContextError a :: (SomethingWentWrong a) | NoContextError

const MATH_PI :: 3.14

class Monad m ::
    bind :: (m a), (a => (m b)) => (m b)
    return :: a => (m a)

instance Monad Option ::
    bind ::
    case
        None, _ => None;
        (Some x), f => f x;
    return ::
    do
        a => Some a

type Sheep ::
    father : (Option Sheep)
    mother : (Option Sheep)

def father :: Sheep => (Option Sheep)
    s => s.father

def mother :: Sheep => (Option Sheep)
    s => s.mother

def materialGrandFather :: Sheep => (Option Sheep)
    s => bind (bind (return s) mother) father

def paternalGrandFather :: Sheep => (Option Sheep)
    s => bind (bind (return s) father) father

type BTree a :: Leaf a | Node a (Leaf a) (Leaf a)

def find_value :: (Btree a), a => Option a
case
    (Leaf v), c =>
        if c == v then
            Some c
        else
            None
    (Node v left right), c =>
        if v < c then
            find_value left v
        elseif v > c then
            find_value right v
        elseif v == c then
            Some c
        else
            None

type List a :: Nil | (Cons a (List a))

def join :: (List (List a)) => (List a)
case
        Nil => Nil;
        (Cons xs xss) => cat xs (join xss);

def cat :: (List a), (List a) => (List a)
case
    Nil, ls => ls;
    (Cons x xs), ys => Cons x (cat xs ys);

def somthin :: Integer, Intger => (Integer, Integer)
case
    (Some a), b => a + b;
    {a, b}, c => (a-b+c^4*4, a+b-10*2/10^5);
    {x:xs}, _ => x : xs;

def main :: ()
    list := Cons 5 (Cons 10 Nil)
    foo := 5
    (a, b) := (1+2*3^5, 123)
    (c, d) := (1+2, 1.23)
    (e, d) := (Cons 5, Cons 2)

    grandpa := { father = None, mother = None }
    father := { father = grandpa, mother = None }
    sheep := { father = father, mother = None }

    grandpa_result := paternalGrandFather sheep
    foo := 10

    case grandpa_result
        (Some x) => print "sheep has a grandpa!" x;
        None => ();

    print "hello world!"
    my_proc!
